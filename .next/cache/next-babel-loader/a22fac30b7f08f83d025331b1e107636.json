{"ast":null,"code":"import Repository, { baseUrl, serializeQuery } from './Repository';\n\nclass ProductRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getRecords(params) {\n    const reponse = await Repository.get(`${baseUrl}/products?${serializeQuery(params)}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getBrands() {\n    const reponse = await Repository.get(`${baseUrl}/brands`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductCategories() {\n    const reponse = await Repository.get(`${baseUrl}/product-categories`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getTotalRecords() {\n    const reponse = await Repository.get(`${baseUrl}/products/count`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsById(payload) {\n    const reponse = await Repository.get(`${baseUrl}/products/${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByCategory(payload) {\n    const reponse = await Repository.get(`${baseUrl}/product-categories?slug=${payload}`).then(response => {\n      return response.data[0].products;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByBrands(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `id_in=${item}`;\n      } else {\n        query = query + `&id_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/brands?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByPriceRange(payload) {\n    const reponse = await Repository.get(`${baseUrl}/products?${serializeQuery(payload)}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new ProductRepository();","map":null,"metadata":{},"sourceType":"module"}