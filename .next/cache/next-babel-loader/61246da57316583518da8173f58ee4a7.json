{"ast":null,"code":"import Repository, { baseUrl, serializeQuery } from './Repository';\n\nclass ProductRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getRecords(params) {\n    const reponse = await Repository.get(`${baseUrl}/products?${serializeQuery(params)}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getBrands() {\n    const reponse = await Repository.get(`${baseUrl}/brands`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductCategories() {\n    const reponse = await Repository.get(`${baseUrl}/product-categories`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getTotalRecords() {\n    const reponse = await Repository.get(`${baseUrl}/products/count`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsById(payload) {\n    const reponse = await Repository.get(`${baseUrl}/products/${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByCategory(payload) {\n    const reponse = await Repository.get(`${baseUrl}/product-categories?slug=${payload}`).then(response => {\n      return response.data[0].products;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByBrands(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `id_in=${item}`;\n      } else {\n        query = query + `&id_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/brands?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByPriceRange(payload) {\n    const reponse = await Repository.get(`${baseUrl}/products?${serializeQuery(payload)}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new ProductRepository();","map":{"version":3,"sources":["C:/chc-ui/repositories/ProductRepository.js"],"names":["Repository","baseUrl","serializeQuery","ProductRepository","constructor","callback","getRecords","params","reponse","get","then","response","data","catch","error","JSON","stringify","getBrands","getProductCategories","getTotalRecords","getProductsById","payload","getProductsByCategory","products","getProductsByBrands","query","forEach","item","getProductsByPriceRange"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,OAArB,EAA8BC,cAA9B,QAAoD,cAApD;;AAEA,MAAMC,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAED,QAAMC,UAAN,CAAiBC,MAAjB,EAAyB;AACrB,UAAMC,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CACjB,GAAER,OAAQ,aAAYC,cAAc,CAACK,MAAD,CAAS,EAD5B,EAGjBG,IAHiB,CAGZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KALiB,EAMjBC,KANiB,CAMXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CANM,CAAtB;AAOA,WAAON,OAAP;AACH;;AAED,QAAMS,SAAN,GAAkB;AACd,UAAMT,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CAAgB,GAAER,OAAQ,SAA1B,EACjBS,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAED,QAAMU,oBAAN,GAA6B;AACzB,UAAMV,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CAAgB,GAAER,OAAQ,qBAA1B,EACjBS,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAED,QAAMW,eAAN,GAAwB;AACpB,UAAMX,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CAAgB,GAAER,OAAQ,iBAA1B,EACjBS,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAED,QAAMY,eAAN,CAAsBC,OAAtB,EAA+B;AAC3B,UAAMb,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CAAgB,GAAER,OAAQ,aAAYoB,OAAQ,EAA9C,EACjBX,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAED,QAAMc,qBAAN,CAA4BD,OAA5B,EAAqC;AACjC,UAAMb,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CACjB,GAAER,OAAQ,4BAA2BoB,OAAQ,EAD5B,EAGjBX,IAHiB,CAGZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBW,QAAxB;AACH,KALiB,EAMjBV,KANiB,CAMXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CANM,CAAtB;AAOA,WAAON,OAAP;AACH;;AAED,QAAMgB,mBAAN,CAA0BH,OAA1B,EAAmC;AAC/B,QAAII,KAAK,GAAG,EAAZ;AACAJ,IAAAA,OAAO,CAACK,OAAR,CAAgBC,IAAI,IAAI;AACpB,UAAIF,KAAK,KAAK,EAAd,EAAkB;AACdA,QAAAA,KAAK,GAAI,SAAQE,IAAK,EAAtB;AACH,OAFD,MAEO;AACHF,QAAAA,KAAK,GAAGA,KAAK,GAAI,UAASE,IAAK,EAA/B;AACH;AACJ,KAND;AAOA,UAAMnB,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CAAgB,GAAER,OAAQ,WAAUwB,KAAM,EAA1C,EACjBf,IADiB,CACZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CAJM,CAAtB;AAKA,WAAON,OAAP;AACH;;AAED,QAAMoB,uBAAN,CAA8BP,OAA9B,EAAuC;AACnC,UAAMb,OAAO,GAAG,MAAMR,UAAU,CAACS,GAAX,CACjB,GAAER,OAAQ,aAAYC,cAAc,CAACmB,OAAD,CAAU,EAD7B,EAGjBX,IAHiB,CAGZC,QAAQ,IAAI;AACd,aAAOA,QAAQ,CAACC,IAAhB;AACH,KALiB,EAMjBC,KANiB,CAMXC,KAAK,KAAK;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAL,CANM,CAAtB;AAOA,WAAON,OAAP;AACH;;AAzFmB;;AA4FxB,eAAe,IAAIL,iBAAJ,EAAf","sourcesContent":["import Repository, { baseUrl, serializeQuery } from './Repository';\r\n\r\nclass ProductRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getRecords(params) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/products?${serializeQuery(params)}`\r\n        )\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getBrands() {\r\n        const reponse = await Repository.get(`${baseUrl}/brands`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductCategories() {\r\n        const reponse = await Repository.get(`${baseUrl}/product-categories`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getTotalRecords() {\r\n        const reponse = await Repository.get(`${baseUrl}/products/count`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsById(payload) {\r\n        const reponse = await Repository.get(`${baseUrl}/products/${payload}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsByCategory(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/product-categories?slug=${payload}`\r\n        )\r\n            .then(response => {\r\n                return response.data[0].products;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsByBrands(payload) {\r\n        let query = '';\r\n        payload.forEach(item => {\r\n            if (query === '') {\r\n                query = `id_in=${item}`;\r\n            } else {\r\n                query = query + `&id_in=${item}`;\r\n            }\r\n        });\r\n        const reponse = await Repository.get(`${baseUrl}/brands?${query}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsByPriceRange(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/products?${serializeQuery(payload)}`\r\n        )\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new ProductRepository();\r\n"]},"metadata":{},"sourceType":"module"}