{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCollections),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCollectionByCategories),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport { actionTypes, getCategoriesSuccess, getCollectionsSuccess } from './action';\nimport { isStaticData } from '../../utilities/app-settings';\nimport CollectionRepository from '../../repositories/CollectionRepository';\nimport StaticCollectionRepository from '../../repositories/static/StaticCollectionRepository';\npolyfill();\n\nfunction getCollections(_ref) {\n  var payload, data, _data;\n\n  return _regeneratorRuntime.wrap(function getCollections$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n\n          if (!(isStaticData === false)) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 5;\n          return call(CollectionRepository.getCollections, payload);\n\n        case 5:\n          data = _context.sent;\n          _context.next = 8;\n          return put(getCollectionsSuccess(data));\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.next = 12;\n          return call(StaticCollectionRepository.getCollections, payload);\n\n        case 12:\n          _data = _context.sent;\n          _context.next = 15;\n          return put(getCollectionsSuccess(_data));\n\n        case 15:\n          _context.next = 20;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(_context.t0);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 17]]);\n}\n\nfunction getCollectionByCategories(_ref2) {\n  var payload, data, _data2;\n\n  return _regeneratorRuntime.wrap(function getCollectionByCategories$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context2.prev = 1;\n\n          if (!(isStaticData === false)) {\n            _context2.next = 10;\n            break;\n          }\n\n          _context2.next = 5;\n          return call(CollectionRepository.getCategoriesBySlug, payload);\n\n        case 5:\n          data = _context2.sent;\n          _context2.next = 8;\n          return put(getCategoriesSuccess(data));\n\n        case 8:\n          _context2.next = 15;\n          break;\n\n        case 10:\n          _context2.next = 12;\n          return call(StaticCollectionRepository.getCollections, payload);\n\n        case 12:\n          _data2 = _context2.sent;\n          _context2.next = 15;\n          return put(getCollectionsSuccess(_data2));\n\n        case 15:\n          _context2.next = 20;\n          break;\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(_context2.t0);\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 17]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actionTypes.GET_COLLECTIONS, getCollections)]);\n\n        case 2:\n          _context3.next = 4;\n          return all([takeEvery(actionTypes.GET_CATEGORIES, getCollectionByCategories)]);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["G:/the-hexaa/ReactJS/martfury_react_package_1_3/martfury-react-1_3/store/collection/saga.js"],"names":["getCollections","getCollectionByCategories","rootSaga","all","put","call","takeEvery","polyfill","actionTypes","getCategoriesSuccess","getCollectionsSuccess","isStaticData","CollectionRepository","StaticCollectionRepository","payload","data","console","log","getCategoriesBySlug","GET_COLLECTIONS","GET_CATEGORIES"],"mappings":";;;;yBAQUA,c;;;yBAmBAC,yB;;;yBAoBeC,Q;;AA/CzB,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,oBAAtB,EAA4CC,qBAA5C,QAAyE,UAAzE;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAOC,oBAAP,MAAiC,yCAAjC;AACA,OAAOC,0BAAP,MAAuC,sDAAvC;AACAN,QAAQ;;AAER,SAAUP,cAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA2Bc,UAAAA,OAA3B,QAA2BA,OAA3B;AAAA;;AAAA,gBAEYH,YAAY,KAAK,KAF7B;AAAA;AAAA;AAAA;;AAAA;AAGyB,iBAAMN,IAAI,CACnBO,oBAAoB,CAACZ,cADF,EAEnBc,OAFmB,CAAV;;AAHzB;AAGkBC,UAAAA,IAHlB;AAAA;AAOY,iBAAMX,GAAG,CAACM,qBAAqB,CAACK,IAAD,CAAtB,CAAT;;AAPZ;AAAA;AAAA;;AAAA;AAAA;AASyB,iBAAMV,IAAI,CACnBQ,0BAA0B,CAACb,cADR,EAEnBc,OAFmB,CAAV;;AATzB;AASkBC,UAAAA,KATlB;AAAA;AAaY,iBAAMX,GAAG,CAACM,qBAAqB,CAACK,KAAD,CAAtB,CAAT;;AAbZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBQC,UAAAA,OAAO,CAACC,GAAR;;AAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUhB,yBAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsCa,UAAAA,OAAtC,SAAsCA,OAAtC;AAAA;;AAAA,gBAEYH,YAAY,KAAK,KAF7B;AAAA;AAAA;AAAA;;AAAA;AAGyB,iBAAMN,IAAI,CACnBO,oBAAoB,CAACM,mBADF,EAEnBJ,OAFmB,CAAV;;AAHzB;AAGkBC,UAAAA,IAHlB;AAAA;AAOY,iBAAMX,GAAG,CAACK,oBAAoB,CAACM,IAAD,CAArB,CAAT;;AAPZ;AAAA;AAAA;;AAAA;AAAA;AASyB,iBAAMV,IAAI,CACnBQ,0BAA0B,CAACb,cADR,EAEnBc,OAFmB,CAAV;;AATzB;AASkBC,UAAAA,MATlB;AAAA;AAaY,iBAAMX,GAAG,CAACM,qBAAqB,CAACK,MAAD,CAAtB,CAAT;;AAbZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBQC,UAAAA,OAAO,CAACC,GAAR;;AAhBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,eAAe,SAAUf,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACW,eAAb,EAA8BnB,cAA9B,CAAV,CAAD,CAAT;;AADW;AAAA;AAEX,iBAAMG,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACY,cAAb,EAA6BnB,yBAA7B,CAAV,CAAD,CAAT;;AAFW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport { actionTypes, getCategoriesSuccess, getCollectionsSuccess } from './action';\nimport { isStaticData } from '../../utilities/app-settings';\nimport CollectionRepository from '../../repositories/CollectionRepository';\nimport StaticCollectionRepository from '../../repositories/static/StaticCollectionRepository';\npolyfill();\n\nfunction* getCollections({ payload }) {\n    try {\n        if (isStaticData === false) {\n            const data = yield call(\n                CollectionRepository.getCollections,\n                payload\n            );\n            yield put(getCollectionsSuccess(data));\n        } else {\n            const data = yield call(\n                StaticCollectionRepository.getCollections,\n                payload\n            );\n            yield put(getCollectionsSuccess(data));\n        }\n    } catch (err) {\n        console.log(err);\n    }\n}\nfunction* getCollectionByCategories({ payload }) {\n    try {\n        if (isStaticData === false) {\n            const data = yield call(\n                CollectionRepository.getCategoriesBySlug,\n                payload\n            );\n            yield put(getCategoriesSuccess(data));\n        } else {\n            const data = yield call(\n                StaticCollectionRepository.getCollections,\n                payload\n            );\n            yield put(getCollectionsSuccess(data));\n        }\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([takeEvery(actionTypes.GET_COLLECTIONS, getCollections)]);\n    yield all([takeEvery(actionTypes.GET_CATEGORIES, getCollectionByCategories)]);\n}\n"]},"metadata":{},"sourceType":"module"}