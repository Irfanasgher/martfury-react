{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Repository, { baseUrl, serializeQuery } from './Repository';\n\nvar ProductRepository =\n/*#__PURE__*/\nfunction () {\n  function ProductRepository(callback) {\n    _classCallCheck(this, ProductRepository);\n\n    this.callback = callback;\n  }\n\n  _createClass(ProductRepository, [{\n    key: \"getRecords\",\n    value: function getRecords(params) {\n      var reponse;\n      return _regeneratorRuntime.async(function getRecords$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/products?\").concat(serializeQuery(params))).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context.sent;\n              return _context.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getBrands\",\n    value: function getBrands() {\n      var reponse;\n      return _regeneratorRuntime.async(function getBrands$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/brands\")).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context2.sent;\n              return _context2.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getProductCategories\",\n    value: function getProductCategories() {\n      var reponse;\n      return _regeneratorRuntime.async(function getProductCategories$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/product-categories\")).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context3.sent;\n              return _context3.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getTotalRecords\",\n    value: function getTotalRecords() {\n      var reponse;\n      return _regeneratorRuntime.async(function getTotalRecords$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/products/count\")).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context4.sent;\n              return _context4.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getProductsById\",\n    value: function getProductsById(payload) {\n      var reponse;\n      return _regeneratorRuntime.async(function getProductsById$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/products/\").concat(payload)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context5.sent;\n              return _context5.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getProductsByCategory\",\n    value: function getProductsByCategory(payload) {\n      var reponse;\n      return _regeneratorRuntime.async(function getProductsByCategory$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/product-categories?slug=\").concat(payload)).then(function (response) {\n                return response.data[0].products;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context6.sent;\n              return _context6.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getProductsByBrands\",\n    value: function getProductsByBrands(payload) {\n      var query, reponse;\n      return _regeneratorRuntime.async(function getProductsByBrands$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              query = '';\n              payload.forEach(function (item) {\n                if (query === '') {\n                  query = \"id_in=\".concat(item);\n                } else {\n                  query = query + \"&id_in=\".concat(item);\n                }\n              });\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/brands?\").concat(query)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 4:\n              reponse = _context7.sent;\n              return _context7.abrupt(\"return\", reponse);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getProductsByPriceRange\",\n    value: function getProductsByPriceRange(payload) {\n      var reponse;\n      return _regeneratorRuntime.async(function getProductsByPriceRange$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/products?\").concat(serializeQuery(payload))).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context8.sent;\n              return _context8.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return ProductRepository;\n}();\n\nexport default new ProductRepository();","map":null,"metadata":{},"sourceType":"module"}