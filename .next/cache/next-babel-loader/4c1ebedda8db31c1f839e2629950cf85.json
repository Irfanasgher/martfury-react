{"ast":null,"code":"var _jsxFileName = \"C:\\\\chc-ui\\\\components\\\\shared\\\\panel\\\\PanelMenu.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Menu } from 'antd';\nimport { menuPrimary } from '../../../public/static/data/menu';\nimport Link from 'next/link';\nconst {\n  SubMenu\n} = Menu;\n\nclass PanelMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"rootSubmenuKeys\", ['sub1', 'sub2', 'sub4']);\n\n    _defineProperty(this, \"state\", {\n      openKeys: []\n    });\n\n    _defineProperty(this, \"onOpenChange\", openKeys => {\n      const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);\n\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n        this.setState({\n          openKeys\n        });\n      } else {\n        this.setState({\n          openKeys: latestOpenKey ? [latestOpenKey] : []\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Menu, {\n      mode: \"inline\",\n      openKeys: this.state.openKeys,\n      onOpenChange: this.onOpenChange,\n      className: \"menu--mobile-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, menuPrimary.menu_1.map(item => {\n      if (item.subMenu) {\n        return __jsx(SubMenu, {\n          key: item.text,\n          title: __jsx(Link, {\n            href: item.url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, __jsx(\"a\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }, item.text)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, item.subMenu.map(subItem => __jsx(Menu.Item, {\n          key: subItem.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, __jsx(Link, {\n          href: subItem.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, subItem.text)))));\n      } else if (item.megaContent) {\n        return __jsx(SubMenu, {\n          key: item.text,\n          title: __jsx(Link, {\n            href: item.url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }, __jsx(\"a\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, item.text)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, item.megaContent.map(megaItem => __jsx(SubMenu, {\n          key: megaItem.heading,\n          title: __jsx(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, megaItem.heading),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }, megaItem.megaItems.map(megaSubItem => __jsx(Menu.Item, {\n          key: megaSubItem.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, __jsx(Link, {\n          href: item.url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, megaSubItem.text)))))));\n      } else {\n        return __jsx(Menu.Item, {\n          key: item.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, item.type === 'dynamic' ? __jsx(Link, {\n          href: `${item.url}/[pid]`,\n          as: `${item.url}/${item.endPoint}`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, \"l\", __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, item.text)) : __jsx(Link, {\n          href: item.url,\n          as: item.alias,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, __jsx(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, item.text)));\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return state.setting;\n};\n\nexport default connect(mapStateToProps)(PanelMenu);","map":{"version":3,"sources":["C:/chc-ui/components/shared/panel/PanelMenu.jsx"],"names":["React","Component","connect","Menu","menuPrimary","Link","SubMenu","PanelMenu","constructor","props","openKeys","latestOpenKey","find","key","state","indexOf","rootSubmenuKeys","setState","render","onOpenChange","menu_1","map","item","subMenu","text","url","subItem","megaContent","megaItem","heading","megaItems","megaSubItem","type","endPoint","alias","mapStateToProps","setting"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcH,IAApB;;AAEA,MAAMI,SAAN,SAAwBN,SAAxB,CAAkC;AAC9BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,6CAID,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAJC;;AAAA,mCAMX;AACJC,MAAAA,QAAQ,EAAE;AADN,KANW;;AAAA,0CAUHA,QAAD,IAAc;AACzB,YAAMC,aAAa,GAAGD,QAAQ,CAACE,IAAT,CACjBC,GAAD,IAAS,KAAKC,KAAL,CAAWJ,QAAX,CAAoBK,OAApB,CAA4BF,GAA5B,MAAqC,CAAC,CAD7B,CAAtB;;AAGA,UAAI,KAAKG,eAAL,CAAqBD,OAArB,CAA6BJ,aAA7B,MAAgD,CAAC,CAArD,EAAwD;AACpD,aAAKM,QAAL,CAAc;AAAEP,UAAAA;AAAF,SAAd;AACH,OAFD,MAEO;AACH,aAAKO,QAAL,CAAc;AACVP,UAAAA,QAAQ,EAAEC,aAAa,GAAG,CAACA,aAAD,CAAH,GAAqB;AADlC,SAAd;AAGH;AACJ,KArBkB;AAElB;;AAqBDO,EAAAA,MAAM,GAAG;AACL,WACI,MAAC,IAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWJ,QAFzB;AAGI,MAAA,YAAY,EAAE,KAAKS,YAHvB;AAII,MAAA,SAAS,EAAC,gBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKKf,WAAW,CAACgB,MAAZ,CAAmBC,GAAnB,CAAwBC,IAAD,IAAU;AAC9B,UAAIA,IAAI,CAACC,OAAT,EAAkB;AACd,eACI,MAAC,OAAD;AACI,UAAA,GAAG,EAAED,IAAI,CAACE,IADd;AAEI,UAAA,KAAK,EACD,MAAC,IAAD;AAAM,YAAA,IAAI,EAAEF,IAAI,CAACG,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAIH,IAAI,CAACE,IAAT,CADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOKF,IAAI,CAACC,OAAL,CAAaF,GAAb,CAAkBK,OAAD,IACd,MAAC,IAAD,CAAM,IAAN;AAAW,UAAA,GAAG,EAAEA,OAAO,CAACF,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,IAAD;AAAM,UAAA,IAAI,EAAEE,OAAO,CAACD,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIC,OAAO,CAACF,IAAZ,CADJ,CADJ,CADH,CAPL,CADJ;AAiBH,OAlBD,MAkBO,IAAIF,IAAI,CAACK,WAAT,EAAsB;AACzB,eACI,MAAC,OAAD;AACI,UAAA,GAAG,EAAEL,IAAI,CAACE,IADd;AAEI,UAAA,KAAK,EACD,MAAC,IAAD;AAAM,YAAA,IAAI,EAAEF,IAAI,CAACG,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAIH,IAAI,CAACE,IAAT,CADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAOKF,IAAI,CAACK,WAAL,CAAiBN,GAAjB,CAAsBO,QAAD,IAClB,MAAC,OAAD;AACI,UAAA,GAAG,EAAEA,QAAQ,CAACC,OADlB;AAEI,UAAA,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAOD,QAAQ,CAACC,OAAhB,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGKD,QAAQ,CAACE,SAAT,CAAmBT,GAAnB,CACIU,WAAD,IACI,MAAC,IAAD,CAAM,IAAN;AACI,UAAA,GAAG,EAAEA,WAAW,CAACP,IADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,MAAC,IAAD;AAAM,UAAA,IAAI,EAAEF,IAAI,CAACG,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKM,WAAW,CAACP,IADjB,CADJ,CAFJ,CAFP,CAHL,CADH,CAPL,CADJ;AA4BH,OA7BM,MA6BA;AACH,eACI,MAAC,IAAD,CAAM,IAAN;AAAW,UAAA,GAAG,EAAEF,IAAI,CAACE,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,IAAI,CAACU,IAAL,KAAc,SAAd,GACG,MAAC,IAAD;AACI,UAAA,IAAI,EAAG,GAAEV,IAAI,CAACG,GAAI,QADtB;AAEI,UAAA,EAAE,EAAG,GAAEH,IAAI,CAACG,GAAI,IAAGH,IAAI,CAACW,QAAS,EAFrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAGK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIX,IAAI,CAACE,IAAT,CAHL,CADH,GAOG,MAAC,IAAD;AAAM,UAAA,IAAI,EAAEF,IAAI,CAACG,GAAjB;AAAsB,UAAA,EAAE,EAAEH,IAAI,CAACY,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIZ,IAAI,CAACE,IAAT,CADJ,CARR,CADJ;AAeH;AACJ,KAjEA,CALL,CADJ;AA0EH;;AAnG6B;;AAsGlC,MAAMW,eAAe,GAAIrB,KAAD,IAAW;AAC/B,SAAOA,KAAK,CAACsB,OAAb;AACH,CAFD;;AAIA,eAAelC,OAAO,CAACiC,eAAD,CAAP,CAAyB5B,SAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Menu } from 'antd';\r\nimport { menuPrimary } from '../../../public/static/data/menu';\r\nimport Link from 'next/link';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nclass PanelMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    rootSubmenuKeys = ['sub1', 'sub2', 'sub4'];\r\n\r\n    state = {\r\n        openKeys: [],\r\n    };\r\n\r\n    onOpenChange = (openKeys) => {\r\n        const latestOpenKey = openKeys.find(\r\n            (key) => this.state.openKeys.indexOf(key) === -1\r\n        );\r\n        if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n            this.setState({ openKeys });\r\n        } else {\r\n            this.setState({\r\n                openKeys: latestOpenKey ? [latestOpenKey] : [],\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Menu\r\n                mode=\"inline\"\r\n                openKeys={this.state.openKeys}\r\n                onOpenChange={this.onOpenChange}\r\n                className=\"menu--mobile-2\">\r\n                {menuPrimary.menu_1.map((item) => {\r\n                    if (item.subMenu) {\r\n                        return (\r\n                            <SubMenu\r\n                                key={item.text}\r\n                                title={\r\n                                    <Link href={item.url}>\r\n                                        <a>{item.text}</a>\r\n                                    </Link>\r\n                                }>\r\n                                {item.subMenu.map((subItem) => (\r\n                                    <Menu.Item key={subItem.text}>\r\n                                        <Link href={subItem.url}>\r\n                                            <a>{subItem.text}</a>\r\n                                        </Link>\r\n                                    </Menu.Item>\r\n                                ))}\r\n                            </SubMenu>\r\n                        );\r\n                    } else if (item.megaContent) {\r\n                        return (\r\n                            <SubMenu\r\n                                key={item.text}\r\n                                title={\r\n                                    <Link href={item.url}>\r\n                                        <a>{item.text}</a>\r\n                                    </Link>\r\n                                }>\r\n                                {item.megaContent.map((megaItem) => (\r\n                                    <SubMenu\r\n                                        key={megaItem.heading}\r\n                                        title={<span>{megaItem.heading}</span>}>\r\n                                        {megaItem.megaItems.map(\r\n                                            (megaSubItem) => (\r\n                                                <Menu.Item\r\n                                                    key={megaSubItem.text}>\r\n                                                    <Link href={item.url}>\r\n                                                        <a>\r\n                                                            {megaSubItem.text}\r\n                                                        </a>\r\n                                                    </Link>\r\n                                                </Menu.Item>\r\n                                            )\r\n                                        )}\r\n                                    </SubMenu>\r\n                                ))}\r\n                            </SubMenu>\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <Menu.Item key={item.text}>\r\n                                {item.type === 'dynamic' ? (\r\n                                    <Link\r\n                                        href={`${item.url}/[pid]`}\r\n                                        as={`${item.url}/${item.endPoint}`}>\r\n                                        l<a>{item.text}</a>\r\n                                    </Link>\r\n                                ) : (\r\n                                    <Link href={item.url} as={item.alias}>\r\n                                        <a>{item.text}</a>\r\n                                    </Link>\r\n                                )}\r\n                            </Menu.Item>\r\n                        );\r\n                    }\r\n                })}\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state.setting;\r\n};\r\n\r\nexport default connect(mapStateToProps)(PanelMenu);\r\n"]},"metadata":{},"sourceType":"module"}