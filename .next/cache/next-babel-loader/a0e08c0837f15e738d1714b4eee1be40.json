{"ast":null,"code":"import Repository, { baseUrl, serializeQuery } from './Repository';\n\nclass CollectionRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  async getCollections(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `slug_in=${item}`;\n      } else {\n        query = query + `&slug_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/collections?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getCategoriesBySlug(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `slug_in=${item}`;\n      } else {\n        query = query + `&slug_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/product-categories?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsBySlug(slug) {\n    const reponse = await Repository.get(`${baseUrl}/collections/slug?=${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new CollectionRepository();","map":null,"metadata":{},"sourceType":"module"}