{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Repository, { baseUrl, serializeQuery } from './Repository';\n\nvar CollectionRepository =\n/*#__PURE__*/\nfunction () {\n  function CollectionRepository(callback) {\n    _classCallCheck(this, CollectionRepository);\n\n    this.callback = callback;\n  }\n\n  _createClass(CollectionRepository, [{\n    key: \"getCollections\",\n    value: function getCollections(payload) {\n      var query, reponse;\n      return _regeneratorRuntime.async(function getCollections$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = '';\n              payload.forEach(function (item) {\n                if (query === '') {\n                  query = \"slug_in=\".concat(item);\n                } else {\n                  query = query + \"&slug_in=\".concat(item);\n                }\n              });\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/collections?\").concat(query)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 4:\n              reponse = _context.sent;\n              return _context.abrupt(\"return\", reponse);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getCategoriesBySlug\",\n    value: function getCategoriesBySlug(payload) {\n      var query, reponse;\n      return _regeneratorRuntime.async(function getCategoriesBySlug$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              query = '';\n              payload.forEach(function (item) {\n                if (query === '') {\n                  query = \"slug_in=\".concat(item);\n                } else {\n                  query = query + \"&slug_in=\".concat(item);\n                }\n              });\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/product-categories?\").concat(query)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 4:\n              reponse = _context2.sent;\n              return _context2.abrupt(\"return\", reponse);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getProductsBySlug\",\n    value: function getProductsBySlug(slug) {\n      var reponse;\n      return _regeneratorRuntime.async(function getProductsBySlug$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/collections/slug?=\").concat(payload)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context3.sent;\n              return _context3.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return CollectionRepository;\n}();\n\nexport default new CollectionRepository();","map":{"version":3,"sources":["C:/chc-ui/repositories/CollectionRepository.js"],"names":["Repository","baseUrl","serializeQuery","CollectionRepository","callback","payload","query","forEach","item","get","then","response","data","error","JSON","stringify","reponse","slug"],"mappings":";;;AAAA,OAAOA,UAAP,IAAqBC,OAArB,EAA8BC,cAA9B,QAAoD,cAApD;;IAEMC,oB;;;AACF,gCAAYC,QAAZ,EAAsB;AAAA;;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;;;mCAEoBC,O;;;;;;AACbC,cAAAA,K,GAAQ,E;AACZD,cAAAA,OAAO,CAACE,OAAR,CAAgB,UAAAC,IAAI,EAAI;AACpB,oBAAIF,KAAK,KAAK,EAAd,EAAkB;AACdA,kBAAAA,KAAK,qBAAcE,IAAd,CAAL;AACH,iBAFD,MAEO;AACHF,kBAAAA,KAAK,GAAGA,KAAK,sBAAeE,IAAf,CAAb;AACH;AACJ,eAND;;+CAOsBR,UAAU,CAACS,GAAX,WAAkBR,OAAlB,0BAAyCK,KAAzC,GACjBI,IADiB,CACZ,UAAAC,QAAQ,EAAI;AACd,uBAAOA,QAAQ,CAACC,IAAhB;AACH,eAHiB,WAIX,UAAAC,KAAK;AAAA,uBAAK;AAAEA,kBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,iBAAL;AAAA,eAJM,C;;;AAAhBG,cAAAA,O;+CAKCA,O;;;;;;;;;;;wCAEeX,O;;;;;;AAClBC,cAAAA,K,GAAQ,E;AACZD,cAAAA,OAAO,CAACE,OAAR,CAAgB,UAAAC,IAAI,EAAI;AACpB,oBAAIF,KAAK,KAAK,EAAd,EAAkB;AACdA,kBAAAA,KAAK,qBAAcE,IAAd,CAAL;AACH,iBAFD,MAEO;AACHF,kBAAAA,KAAK,GAAGA,KAAK,sBAAeE,IAAf,CAAb;AACH;AACJ,eAND;;+CAOsBR,UAAU,CAACS,GAAX,WACfR,OADe,iCACeK,KADf,GAGjBI,IAHiB,CAGZ,UAAAC,QAAQ,EAAI;AACd,uBAAOA,QAAQ,CAACC,IAAhB;AACH,eALiB,WAMX,UAAAC,KAAK;AAAA,uBAAK;AAAEA,kBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,iBAAL;AAAA,eANM,C;;;AAAhBG,cAAAA,O;gDAOCA,O;;;;;;;;;;;sCAGaC,I;;;;;;;+CACEjB,UAAU,CAACS,GAAX,WACfR,OADe,gCACcI,OADd,GAGjBK,IAHiB,CAGZ,UAAAC,QAAQ,EAAI;AACd,uBAAOA,QAAQ,CAACC,IAAhB;AACH,eALiB,WAMX,UAAAC,KAAK;AAAA,uBAAK;AAAEA,kBAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,iBAAL;AAAA,eANM,C;;;AAAhBG,cAAAA,O;gDAOCA,O;;;;;;;;;;;;;;AAIf,eAAe,IAAIb,oBAAJ,EAAf","sourcesContent":["import Repository, { baseUrl, serializeQuery } from './Repository';\r\n\r\nclass CollectionRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    async getCollections(payload) {\r\n        let query = '';\r\n        payload.forEach(item => {\r\n            if (query === '') {\r\n                query = `slug_in=${item}`;\r\n            } else {\r\n                query = query + `&slug_in=${item}`;\r\n            }\r\n        });\r\n        const reponse = await Repository.get(`${baseUrl}/collections?${query}`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n    async getCategoriesBySlug(payload) {\r\n        let query = '';\r\n        payload.forEach(item => {\r\n            if (query === '') {\r\n                query = `slug_in=${item}`;\r\n            } else {\r\n                query = query + `&slug_in=${item}`;\r\n            }\r\n        });\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/product-categories?${query}`\r\n        )\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsBySlug(slug) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/collections/slug?=${payload}`\r\n        )\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n            .catch(error => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new CollectionRepository();\r\n"]},"metadata":{},"sourceType":"module"}