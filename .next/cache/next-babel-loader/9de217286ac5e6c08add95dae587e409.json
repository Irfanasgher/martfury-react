{"ast":null,"code":"import { all, put, call, takeEvery } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport { actionTypes, getCategoriesSuccess, getCollectionsSuccess } from './action';\nimport { isStaticData } from '../../utilities/app-settings';\nimport CollectionRepository from '../../repositories/CollectionRepository';\nimport StaticCollectionRepository from '../../repositories/static/StaticCollectionRepository';\npolyfill();\n\nfunction* getCollections({\n  payload\n}) {\n  try {\n    if (isStaticData === false) {\n      const data = yield call(CollectionRepository.getCollections, payload);\n      yield put(getCollectionsSuccess(data));\n    } else {\n      const data = yield call(StaticCollectionRepository.getCollections, payload);\n      yield put(getCollectionsSuccess(data));\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getCollectionByCategories({\n  payload\n}) {\n  try {\n    if (isStaticData === false) {\n      const data = yield call(CollectionRepository.getCategoriesBySlug, payload);\n      yield put(getCategoriesSuccess(data));\n    } else {\n      const data = yield call(StaticCollectionRepository.getCollections, payload);\n      yield put(getCollectionsSuccess(data));\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_COLLECTIONS, getCollections)]);\n  yield all([takeEvery(actionTypes.GET_CATEGORIES, getCollectionByCategories)]);\n}","map":{"version":3,"sources":["C:/chc-ui/store/collection/saga.js"],"names":["all","put","call","takeEvery","polyfill","actionTypes","getCategoriesSuccess","getCollectionsSuccess","isStaticData","CollectionRepository","StaticCollectionRepository","getCollections","payload","data","err","console","log","getCollectionByCategories","getCategoriesBySlug","rootSaga","GET_COLLECTIONS","GET_CATEGORIES"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,QAA0C,oBAA1C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,oBAAtB,EAA4CC,qBAA5C,QAAyE,UAAzE;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,OAAOC,oBAAP,MAAiC,yCAAjC;AACA,OAAOC,0BAAP,MAAuC,sDAAvC;AACAN,QAAQ;;AAER,UAAUO,cAAV,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAsC;AAClC,MAAI;AACA,QAAIJ,YAAY,KAAK,KAArB,EAA4B;AACxB,YAAMK,IAAI,GAAG,MAAMX,IAAI,CACnBO,oBAAoB,CAACE,cADF,EAEnBC,OAFmB,CAAvB;AAIA,YAAMX,GAAG,CAACM,qBAAqB,CAACM,IAAD,CAAtB,CAAT;AACH,KAND,MAMO;AACH,YAAMA,IAAI,GAAG,MAAMX,IAAI,CACnBQ,0BAA0B,CAACC,cADR,EAEnBC,OAFmB,CAAvB;AAIA,YAAMX,GAAG,CAACM,qBAAqB,CAACM,IAAD,CAAtB,CAAT;AACH;AACJ,GAdD,CAcE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;;AACD,UAAUG,yBAAV,CAAoC;AAAEL,EAAAA;AAAF,CAApC,EAAiD;AAC7C,MAAI;AACA,QAAIJ,YAAY,KAAK,KAArB,EAA4B;AACxB,YAAMK,IAAI,GAAG,MAAMX,IAAI,CACnBO,oBAAoB,CAACS,mBADF,EAEnBN,OAFmB,CAAvB;AAIA,YAAMX,GAAG,CAACK,oBAAoB,CAACO,IAAD,CAArB,CAAT;AACH,KAND,MAMO;AACH,YAAMA,IAAI,GAAG,MAAMX,IAAI,CACnBQ,0BAA0B,CAACC,cADR,EAEnBC,OAFmB,CAAvB;AAIA,YAAMX,GAAG,CAACM,qBAAqB,CAACM,IAAD,CAAtB,CAAT;AACH;AACJ,GAdD,CAcE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAChC,QAAMnB,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACe,eAAb,EAA8BT,cAA9B,CAAV,CAAD,CAAT;AACA,QAAMX,GAAG,CAAC,CAACG,SAAS,CAACE,WAAW,CAACgB,cAAb,EAA6BJ,yBAA7B,CAAV,CAAD,CAAT;AACH","sourcesContent":["import { all, put, call, takeEvery } from 'redux-saga/effects';\r\nimport { polyfill } from 'es6-promise';\r\nimport { actionTypes, getCategoriesSuccess, getCollectionsSuccess } from './action';\r\nimport { isStaticData } from '../../utilities/app-settings';\r\nimport CollectionRepository from '../../repositories/CollectionRepository';\r\nimport StaticCollectionRepository from '../../repositories/static/StaticCollectionRepository';\r\npolyfill();\r\n\r\nfunction* getCollections({ payload }) {\r\n    try {\r\n        if (isStaticData === false) {\r\n            const data = yield call(\r\n                CollectionRepository.getCollections,\r\n                payload\r\n            );\r\n            yield put(getCollectionsSuccess(data));\r\n        } else {\r\n            const data = yield call(\r\n                StaticCollectionRepository.getCollections,\r\n                payload\r\n            );\r\n            yield put(getCollectionsSuccess(data));\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\nfunction* getCollectionByCategories({ payload }) {\r\n    try {\r\n        if (isStaticData === false) {\r\n            const data = yield call(\r\n                CollectionRepository.getCategoriesBySlug,\r\n                payload\r\n            );\r\n            yield put(getCategoriesSuccess(data));\r\n        } else {\r\n            const data = yield call(\r\n                StaticCollectionRepository.getCollections,\r\n                payload\r\n            );\r\n            yield put(getCollectionsSuccess(data));\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([takeEvery(actionTypes.GET_COLLECTIONS, getCollections)]);\r\n    yield all([takeEvery(actionTypes.GET_CATEGORIES, getCollectionByCategories)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}