{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Repository, { baseUrl, serializeQuery } from './Repository';\n\nvar CollectionRepository =\n/*#__PURE__*/\nfunction () {\n  function CollectionRepository(callback) {\n    _classCallCheck(this, CollectionRepository);\n\n    this.callback = callback;\n  }\n\n  _createClass(CollectionRepository, [{\n    key: \"getCollections\",\n    value: function getCollections(payload) {\n      var query, reponse;\n      return _regeneratorRuntime.async(function getCollections$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = '';\n              payload.forEach(function (item) {\n                if (query === '') {\n                  query = \"slug_in=\".concat(item);\n                } else {\n                  query = query + \"&slug_in=\".concat(item);\n                }\n              });\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/collections?\").concat(query)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 4:\n              reponse = _context.sent;\n              return _context.abrupt(\"return\", reponse);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getCategoriesBySlug\",\n    value: function getCategoriesBySlug(payload) {\n      var query, reponse;\n      return _regeneratorRuntime.async(function getCategoriesBySlug$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              query = '';\n              payload.forEach(function (item) {\n                if (query === '') {\n                  query = \"slug_in=\".concat(item);\n                } else {\n                  query = query + \"&slug_in=\".concat(item);\n                }\n              });\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/product-categories?\").concat(query)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 4:\n              reponse = _context2.sent;\n              return _context2.abrupt(\"return\", reponse);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getProductsBySlug\",\n    value: function getProductsBySlug(slug) {\n      var reponse;\n      return _regeneratorRuntime.async(function getProductsBySlug$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(Repository.get(\"\".concat(baseUrl, \"/collections/slug?=\").concat(payload)).then(function (response) {\n                return response.data;\n              })[\"catch\"](function (error) {\n                return {\n                  error: JSON.stringify(error)\n                };\n              }));\n\n            case 2:\n              reponse = _context3.sent;\n              return _context3.abrupt(\"return\", reponse);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return CollectionRepository;\n}();\n\nexport default new CollectionRepository();","map":null,"metadata":{},"sourceType":"module"}