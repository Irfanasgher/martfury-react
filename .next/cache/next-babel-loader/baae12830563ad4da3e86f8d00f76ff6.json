{"ast":null,"code":"import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport ProductRepository from '../../repositories/ProductRepository';\nimport StaticProductRepository from '../../repositories/static/StaticProductRepository';\nimport { actionTypes, getProductsError, getProductsSuccess, getSingleProductsSuccess, getTotalProductsSuccess, getProductCategoriesSuccess, getBrandsSuccess, getProductByKeywordsSuccess } from './action';\nimport { isStaticData } from '../../utilities/app-settings';\npolyfill();\n\nfunction* getProducts({\n  payload\n}) {\n  try {\n    if (isStaticData === false) {\n      const data = yield call(ProductRepository.getRecords, payload);\n      yield put(getProductsSuccess(data));\n    } else {\n      const data = yield call(StaticProductRepository.getRecords);\n      yield put(getProductsSuccess(data));\n    }\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getTotalOfProducts() {\n  try {\n    if (isStaticData === false) {\n      const result = yield call(ProductRepository.getTotalRecords);\n      yield put(getTotalProductsSuccess(result));\n    } else {\n      const result = yield call(StaticProductRepository.getTotalRecords);\n      yield put(getTotalProductsSuccess(result));\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getBrands() {\n  try {\n    if (isStaticData === false) {\n      const result = yield call(ProductRepository.getBrands);\n      yield put(getBrandsSuccess(result));\n    } else {\n      const result = yield call(StaticProductRepository.getBrands);\n      yield put(getBrandsSuccess(result));\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getProductCategories() {\n  try {\n    if (isStaticData === false) {\n      const result = yield call(ProductRepository.getProductCategories);\n      yield put(getProductCategoriesSuccess(result));\n    } else {\n      const result = yield call(StaticProductRepository.getProductCategories);\n      yield put(getProductCategoriesSuccess(result));\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getProductById({\n  id\n}) {\n  try {\n    if (isStaticData === false) {\n      const product = yield call(ProductRepository.getProductsById, id);\n      yield put(getSingleProductsSuccess(product));\n    } else {\n      const product = yield call(StaticProductRepository.getProductsById, id);\n      yield put(getSingleProductsSuccess(product));\n    }\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByCategory({\n  category\n}) {\n  try {\n    if (isStaticData === false) {\n      const result = yield call(ProductRepository.getProductsByCategory, category);\n      yield put(getProductsSuccess(result));\n      yield put(getTotalProductsSuccess(result.length));\n    } else {\n      const result = yield call(StaticProductRepository.getProductsByCategory, category);\n      yield put(getProductsSuccess(result));\n      yield put(getTotalProductsSuccess(result.length));\n    }\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByPriceRange({\n  payload\n}) {\n  try {\n    if (isStaticData === false) {\n      const products = yield call(ProductRepository.getProductsByPriceRange, payload);\n      yield put(getProductsSuccess(products));\n      yield put(getTotalProductsSuccess(products.length));\n    } else {\n      const products = yield call(StaticProductRepository.getProductsByPriceRange, payload);\n      yield put(getProductsSuccess(products));\n      yield put(getTotalProductsSuccess(products.length));\n    }\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByBrand({\n  payload\n}) {\n  try {\n    if (isStaticData === false) {\n      const brands = yield call(ProductRepository.getProductsByBrands, payload);\n      const products = [];\n      brands.forEach(brand => {\n        brand.products.forEach(product => {\n          products.push(product);\n        });\n      });\n      yield put(getProductsSuccess(products));\n      yield put(getTotalProductsSuccess(products.length));\n    } else {\n      const brands = yield call(StaticProductRepository.getProductsByBrands, payload);\n      const products = [];\n      brands.forEach(brand => {\n        brand.products.forEach(product => {\n          products.push(product);\n        });\n      });\n      yield put(getProductsSuccess(products));\n      yield put(getTotalProductsSuccess(products.length));\n    }\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByKeyword({\n  keyword\n}) {\n  try {\n    if (isStaticData === false) {\n      const searchParams = {\n        title_contains: keyword\n      };\n      const result = yield call(ProductRepository.getRecords, searchParams);\n      yield put(getProductByKeywordsSuccess(result));\n    } else {\n      const result = yield call(StaticProductRepository.getProductsByKeyword, keyword);\n      yield put(getProductByKeywordsSuccess(result));\n    }\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_PRODUCTS, getProducts)]);\n  yield all([takeEvery(actionTypes.GET_TOTAL_OF_PRODUCTS, getTotalOfProducts)]);\n  yield all([takeEvery(actionTypes.GET_BRANDS, getBrands)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCT_CATEGORIES, getProductCategories)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_CATEGORY, getProductByCategory)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_PRICE_RANGE, getProductByPriceRange)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_BRAND, getProductByBrand)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_KEYWORD, getProductByKeyword)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCT_BY_ID, getProductById)]);\n}","map":{"version":3,"sources":["G:/the-hexaa/ReactJS/martfury_react_package_1_3/martfury-react-1_3/store/product/saga.js"],"names":["all","put","takeEvery","call","polyfill","ProductRepository","StaticProductRepository","actionTypes","getProductsError","getProductsSuccess","getSingleProductsSuccess","getTotalProductsSuccess","getProductCategoriesSuccess","getBrandsSuccess","getProductByKeywordsSuccess","isStaticData","getProducts","payload","data","getRecords","err","getTotalOfProducts","result","getTotalRecords","console","log","getBrands","getProductCategories","getProductById","id","product","getProductsById","getProductByCategory","category","getProductsByCategory","length","getProductByPriceRange","products","getProductsByPriceRange","getProductByBrand","brands","getProductsByBrands","forEach","brand","push","getProductByKeyword","keyword","searchParams","title_contains","getProductsByKeyword","rootSaga","GET_PRODUCTS","GET_TOTAL_OF_PRODUCTS","GET_BRANDS","GET_PRODUCT_CATEGORIES","GET_PRODUCTS_BY_CATEGORY","GET_PRODUCTS_BY_PRICE_RANGE","GET_PRODUCTS_BY_BRAND","GET_PRODUCTS_BY_KEYWORD","GET_PRODUCT_BY_ID"],"mappings":"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","sourcesContent":["import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport ProductRepository from '../../repositories/ProductRepository';\nimport StaticProductRepository from '../../repositories/static/StaticProductRepository';\n\nimport {\n    actionTypes,\n    getProductsError,\n    getProductsSuccess,\n    getSingleProductsSuccess,\n    getTotalProductsSuccess,\n    getProductCategoriesSuccess,\n    getBrandsSuccess, getProductByKeywordsSuccess,\n} from './action';\nimport { isStaticData } from '../../utilities/app-settings';\npolyfill();\n\nfunction* getProducts({ payload }) {\n    try {\n        if (isStaticData === false) {\n            const data = yield call(ProductRepository.getRecords, payload);\n            yield put(getProductsSuccess(data));\n        } else {\n            const data = yield call(StaticProductRepository.getRecords);\n            yield put(getProductsSuccess(data));\n        }\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getTotalOfProducts() {\n    try {\n        if (isStaticData === false) {\n            const result = yield call(ProductRepository.getTotalRecords);\n            yield put(getTotalProductsSuccess(result));\n        } else {\n            const result = yield call(StaticProductRepository.getTotalRecords);\n            yield put(getTotalProductsSuccess(result));\n        }\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction* getBrands() {\n    try {\n        if (isStaticData === false) {\n            const result = yield call(ProductRepository.getBrands);\n            yield put(getBrandsSuccess(result));\n        } else {\n            const result = yield call(StaticProductRepository.getBrands);\n            yield put(getBrandsSuccess(result));\n        }\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction* getProductCategories() {\n    try {\n        if (isStaticData === false) {\n            const result = yield call(ProductRepository.getProductCategories);\n            yield put(getProductCategoriesSuccess(result));\n        } else {\n            const result = yield call(\n                StaticProductRepository.getProductCategories\n            );\n            yield put(getProductCategoriesSuccess(result));\n        }\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction* getProductById({ id }) {\n    try {\n        if (isStaticData === false) {\n            const product = yield call(ProductRepository.getProductsById, id);\n            yield put(getSingleProductsSuccess(product));\n        } else {\n            const product = yield call(\n                StaticProductRepository.getProductsById,\n                id\n            );\n            yield put(getSingleProductsSuccess(product));\n        }\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByCategory({ category }) {\n    try {\n        if (isStaticData === false) {\n            const result = yield call(\n                ProductRepository.getProductsByCategory,\n                category\n            );\n            yield put(getProductsSuccess(result));\n            yield put(getTotalProductsSuccess(result.length));\n        } else {\n            const result = yield call(\n                StaticProductRepository.getProductsByCategory,\n                category\n            );\n            yield put(getProductsSuccess(result));\n            yield put(getTotalProductsSuccess(result.length));\n        }\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByPriceRange({ payload }) {\n    try {\n        if (isStaticData === false) {\n            const products = yield call(\n                ProductRepository.getProductsByPriceRange,\n                payload\n            );\n            yield put(getProductsSuccess(products));\n            yield put(getTotalProductsSuccess(products.length));\n        } else {\n            const products = yield call(\n                StaticProductRepository.getProductsByPriceRange,\n                payload\n            );\n            yield put(getProductsSuccess(products));\n            yield put(getTotalProductsSuccess(products.length));\n        }\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByBrand({ payload }) {\n    try {\n        if (isStaticData === false) {\n            const brands = yield call(\n                ProductRepository.getProductsByBrands,\n                payload\n            );\n            const products = [];\n            brands.forEach(brand => {\n                brand.products.forEach(product => {\n                    products.push(product);\n                });\n            });\n            yield put(getProductsSuccess(products));\n            yield put(getTotalProductsSuccess(products.length));\n        } else {\n            const brands = yield call(\n                StaticProductRepository.getProductsByBrands,\n                payload\n            );\n            const products = [];\n            brands.forEach(brand => {\n                brand.products.forEach(product => {\n                    products.push(product);\n                });\n            });\n            yield put(getProductsSuccess(products));\n            yield put(getTotalProductsSuccess(products.length));\n        }\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByKeyword({ keyword }) {\n    try {\n        if (isStaticData === false) {\n            const searchParams = {\n                title_contains: keyword,\n            };\n            const result = yield call(\n                ProductRepository.getRecords,\n                searchParams\n            );\n            yield put(getProductByKeywordsSuccess(result));\n        } else {\n            const result = yield call(\n                StaticProductRepository.getProductsByKeyword,\n                keyword\n            );\n            yield put(getProductByKeywordsSuccess(result));\n        }\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([takeEvery(actionTypes.GET_PRODUCTS, getProducts)]);\n    yield all([\n        takeEvery(actionTypes.GET_TOTAL_OF_PRODUCTS, getTotalOfProducts),\n    ]);\n    yield all([takeEvery(actionTypes.GET_BRANDS, getBrands)]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCT_CATEGORIES, getProductCategories),\n    ]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCTS_BY_CATEGORY, getProductByCategory),\n    ]);\n    yield all([\n        takeEvery(\n            actionTypes.GET_PRODUCTS_BY_PRICE_RANGE,\n            getProductByPriceRange\n        ),\n    ]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCTS_BY_BRAND, getProductByBrand),\n    ]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCTS_BY_KEYWORD, getProductByKeyword),\n    ]);\n    yield all([takeEvery(actionTypes.GET_PRODUCT_BY_ID, getProductById)]);\n}\n"]},"metadata":{},"sourceType":"module"}