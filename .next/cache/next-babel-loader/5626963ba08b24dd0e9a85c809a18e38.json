{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Slider from 'react-slick';\nimport NextArrow from '../../../carousel/NextArrow';\nimport PrevArrow from '../../../carousel/PrevArrow';\nimport Lightbox from 'react-image-lightbox';\nimport { isStaticData } from '../../../../../utilities/app-settings';\nimport { baseUrl } from '../../../../../repositories/Repository';\nimport ThumbnailImage from '../elements/ThumbnailImage';\nimport StaticThumbnailImage from '../elements/StaticThumbnailImage';\n\nclass ThumbnailBox extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleOpenLightbox\", (e, imageIndex) => {\n      e.preventDefault();\n      this.setState({\n        photoIndex: imageIndex,\n        isOpen: true\n      });\n    });\n\n    this.state = {\n      galleryCarousel: null,\n      variantCarousel: null,\n      photoIndex: 0,\n      isOpen: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      galleryCarousel: this.slider1,\n      variantCarousel: this.slider2\n    });\n  }\n\n  render() {\n    const gallerySetting = {\n      dots: false,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      nextArrow: __jsx(NextArrow, null),\n      prevArrow: __jsx(PrevArrow, null)\n    };\n    const variantSetting = {\n      responsive: [{\n        breakpoint: 1024,\n        settings: {\n          slidesToShow: 4,\n          dots: false,\n          arrows: false,\n          vertical: false,\n          infinite: false\n        }\n      }, {\n        breakpoint: 768,\n        settings: {\n          slidesToShow: 4,\n          dots: false,\n          arrows: false,\n          vertical: false,\n          infinite: false\n        }\n      }, {\n        breakpoint: 480,\n        settings: {\n          slidesToShow: 4,\n          dots: false,\n          arrows: false,\n          vertical: false,\n          infinite: false\n        }\n      }]\n    };\n    const {\n      product\n    } = this.props;\n    const {\n      photoIndex,\n      isOpen\n    } = this.state;\n    const productImages = [];\n    product.images.map(variant => {\n      if (isStaticData === false) {\n        productImages.push(`${baseUrl}${variant.url}`);\n      } else {\n        productImages.push(variant.url);\n      }\n    });\n    return __jsx(\"div\", {\n      className: \"ps-product__thumbnail\",\n      \"data-vertical\": \"false\"\n    }, __jsx(\"figure\", null, __jsx(\"div\", {\n      className: \"ps-wrapper\"\n    }, __jsx(Slider, _extends({}, gallerySetting, {\n      ref: slider => this.slider1 = slider,\n      asNavFor: this.state.variantCarousel,\n      className: \"ps-product__gallery ps-carousel inside\"\n    }), product.images.map(variant => __jsx(\"div\", {\n      className: \"item\",\n      key: variant.id\n    }, __jsx(StaticThumbnailImage, {\n      url: variant.url\n    })))))), __jsx(Slider, _extends({\n      asNavFor: this.state.galleryCarousel,\n      ref: slider => this.slider2 = slider,\n      swipeToSlide: true,\n      arrows: false,\n      slidesToShow: 7,\n      vertical: false,\n      focusOnSelect: true,\n      infinite: false\n    }, variantSetting, {\n      className: \"ps-product__variants\"\n    }), product.images.map(variant => __jsx(\"div\", {\n      className: \"item\",\n      key: variant.id\n    }, __jsx(StaticThumbnailImage, {\n      url: variant.url\n    })))), isOpen && __jsx(Lightbox, {\n      mainSrc: productImages[photoIndex],\n      nextSrc: productImages[(photoIndex + 1) % productImages.length],\n      prevSrc: productImages[(photoIndex + productImages.length - 1) % productImages.length],\n      onCloseRequest: () => this.setState({\n        isOpen: false\n      }),\n      onMovePrevRequest: () => this.setState({\n        photoIndex: (photoIndex + productImages.length - 1) % productImages.length\n      }),\n      onMoveNextRequest: () => this.setState({\n        photoIndex: (photoIndex + 1) % productImages.length\n      })\n    }));\n  }\n\n}\n\nexport default ThumbnailBox;","map":null,"metadata":{},"sourceType":"module"}