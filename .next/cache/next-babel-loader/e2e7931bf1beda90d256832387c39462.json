{"ast":null,"code":"import products from '../../public/static/data/static-products';\nimport brands from '../../public/static/data/static-brands';\nimport categories from '../../public/static/data/static-categories.json';\n\nclass StaticProductRepository {\n  constructor(callback) {\n    this.callback = callback;\n  }\n\n  getRecords() {\n    return products;\n  }\n\n  getTotalRecords() {\n    return products.length;\n  }\n\n  getBrands() {\n    return brands;\n  }\n\n  getProductCategories() {\n    return categories;\n  }\n\n  getProductsById(payload) {\n    return products.find(product => product.id = payload);\n  }\n\n  getProductsByCategory(payload) {\n    console.log(payload);\n    const category = categories.find(category => category.slug === payload);\n\n    if (category !== undefined) {\n      return category.products;\n    } else {\n      return [];\n    }\n  }\n\n  getProductsByBrands(payload) {\n    const result = brands.filter(({\n      id\n    }) => {\n      return payload.includes(id);\n    });\n    return result;\n  }\n\n  getProductsByPriceRange(payload) {\n    return products.filter(product => product.price >= payload.price_gt && product.price <= payload.price_lt);\n  }\n\n  getProductsByKeyword(payload) {\n    let regexp = new RegExp(payload.toLowerCase(), 'g');\n    return products.filter(product => product.title.toLowerCase().match(regexp));\n  }\n\n}\n\nexport default new StaticProductRepository();","map":{"version":3,"sources":["C:/chc-ui/repositories/static/StaticProductRepository.js"],"names":["products","brands","categories","StaticProductRepository","constructor","callback","getRecords","getTotalRecords","length","getBrands","getProductCategories","getProductsById","payload","find","product","id","getProductsByCategory","console","log","category","slug","undefined","getProductsByBrands","result","filter","includes","getProductsByPriceRange","price","price_gt","price_lt","getProductsByKeyword","regexp","RegExp","toLowerCase","title","match"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,0CAArB;AACA,OAAOC,MAAP,MAAmB,wCAAnB;AACA,OAAOC,UAAP,MAAuB,iDAAvB;;AAEA,MAAMC,uBAAN,CAA8B;AAC1BC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,WAAON,QAAP;AACH;;AACDO,EAAAA,eAAe,GAAG;AACd,WAAOP,QAAQ,CAACQ,MAAhB;AACH;;AAEDC,EAAAA,SAAS,GAAG;AACR,WAAOR,MAAP;AACH;;AAEDS,EAAAA,oBAAoB,GAAG;AACnB,WAAOR,UAAP;AACH;;AAEDS,EAAAA,eAAe,CAACC,OAAD,EAAU;AACrB,WAAOZ,QAAQ,CAACa,IAAT,CAAcC,OAAO,IAAKA,OAAO,CAACC,EAAR,GAAaH,OAAvC,CAAP;AACH;;AAEDI,EAAAA,qBAAqB,CAACJ,OAAD,EAAU;AAC3BK,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACA,UAAMO,QAAQ,GAAGjB,UAAU,CAACW,IAAX,CAAgBM,QAAQ,IAAIA,QAAQ,CAACC,IAAT,KAAkBR,OAA9C,CAAjB;;AACA,QAAIO,QAAQ,KAAKE,SAAjB,EAA4B;AACxB,aAAOF,QAAQ,CAACnB,QAAhB;AACH,KAFD,MAEO;AACH,aAAO,EAAP;AACH;AACJ;;AAEDsB,EAAAA,mBAAmB,CAACV,OAAD,EAAU;AACzB,UAAMW,MAAM,GAAGtB,MAAM,CAACuB,MAAP,CAAc,CAAC;AAAET,MAAAA;AAAF,KAAD,KAAY;AACrC,aAAOH,OAAO,CAACa,QAAR,CAAiBV,EAAjB,CAAP;AACH,KAFc,CAAf;AAGA,WAAOQ,MAAP;AACH;;AAEDG,EAAAA,uBAAuB,CAACd,OAAD,EAAU;AAC7B,WAAOZ,QAAQ,CAACwB,MAAT,CACHV,OAAO,IACHA,OAAO,CAACa,KAAR,IAAiBf,OAAO,CAACgB,QAAzB,IACAd,OAAO,CAACa,KAAR,IAAiBf,OAAO,CAACiB,QAH1B,CAAP;AAKH;;AACDC,EAAAA,oBAAoB,CAAClB,OAAD,EAAU;AAC1B,QAAImB,MAAM,GAAG,IAAIC,MAAJ,CAAWpB,OAAO,CAACqB,WAAR,EAAX,EAAkC,GAAlC,CAAb;AACA,WAAOjC,QAAQ,CAACwB,MAAT,CAAgBV,OAAO,IAC1BA,OAAO,CAACoB,KAAR,CAAcD,WAAd,GAA4BE,KAA5B,CAAkCJ,MAAlC,CADG,CAAP;AAGH;;AArDyB;;AAwD9B,eAAe,IAAI5B,uBAAJ,EAAf","sourcesContent":["import products from '../../public/static/data/static-products';\r\nimport brands from '../../public/static/data/static-brands';\r\nimport categories from '../../public/static/data/static-categories.json';\r\n\r\nclass StaticProductRepository {\r\n    constructor(callback) {\r\n        this.callback = callback;\r\n    }\r\n\r\n    getRecords() {\r\n        return products;\r\n    }\r\n    getTotalRecords() {\r\n        return products.length;\r\n    }\r\n\r\n    getBrands() {\r\n        return brands;\r\n    }\r\n\r\n    getProductCategories() {\r\n        return categories;\r\n    }\r\n\r\n    getProductsById(payload) {\r\n        return products.find(product => (product.id = payload));\r\n    }\r\n\r\n    getProductsByCategory(payload) {\r\n        console.log(payload);\r\n        const category = categories.find(category => category.slug === payload);\r\n        if (category !== undefined) {\r\n            return category.products;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    getProductsByBrands(payload) {\r\n        const result = brands.filter(({ id }) => {\r\n            return payload.includes(id);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    getProductsByPriceRange(payload) {\r\n        return products.filter(\r\n            product =>\r\n                product.price >= payload.price_gt &&\r\n                product.price <= payload.price_lt\r\n        );\r\n    }\r\n    getProductsByKeyword(payload) {\r\n        let regexp = new RegExp(payload.toLowerCase(), 'g');\r\n        return products.filter(product =>\r\n            product.title.toLowerCase().match(regexp)\r\n        );\r\n    }\r\n}\r\n\r\nexport default new StaticProductRepository();\r\n"]},"metadata":{},"sourceType":"module"}