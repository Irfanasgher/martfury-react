{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Menu } from 'antd';\nimport { menuPrimary } from '../../../public/static/data/menu';\nimport Link from 'next/link';\nconst {\n  SubMenu\n} = Menu;\n\nclass PanelMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"rootSubmenuKeys\", ['sub1', 'sub2', 'sub4']);\n\n    _defineProperty(this, \"state\", {\n      openKeys: []\n    });\n\n    _defineProperty(this, \"onOpenChange\", openKeys => {\n      const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);\n\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n        this.setState({\n          openKeys\n        });\n      } else {\n        this.setState({\n          openKeys: latestOpenKey ? [latestOpenKey] : []\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Menu, {\n      mode: \"inline\",\n      openKeys: this.state.openKeys,\n      onOpenChange: this.onOpenChange,\n      className: \"menu--mobile-2\"\n    }, menuPrimary.menu_1.map(item => {\n      if (item.subMenu) {\n        return __jsx(SubMenu, {\n          key: item.text,\n          title: __jsx(Link, {\n            href: item.url\n          }, __jsx(\"a\", null, item.text))\n        }, item.subMenu.map(subItem => __jsx(Menu.Item, {\n          key: subItem.text\n        }, __jsx(Link, {\n          href: subItem.url\n        }, __jsx(\"a\", null, subItem.text)))));\n      } else if (item.megaContent) {\n        return __jsx(SubMenu, {\n          key: item.text,\n          title: __jsx(Link, {\n            href: item.url\n          }, __jsx(\"a\", null, item.text))\n        }, item.megaContent.map(megaItem => __jsx(SubMenu, {\n          key: megaItem.heading,\n          title: __jsx(\"span\", null, megaItem.heading)\n        }, megaItem.megaItems.map(megaSubItem => __jsx(Menu.Item, {\n          key: megaSubItem.text\n        }, __jsx(Link, {\n          href: item.url\n        }, __jsx(\"a\", null, megaSubItem.text)))))));\n      } else {\n        return __jsx(Menu.Item, {\n          key: item.text\n        }, item.type === 'dynamic' ? __jsx(Link, {\n          href: `${item.url}/[pid]`,\n          as: `${item.url}/${item.endPoint}`\n        }, \"l\", __jsx(\"a\", null, item.text)) : __jsx(Link, {\n          href: item.url,\n          as: item.alias\n        }, __jsx(\"a\", null, item.text)));\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return state.setting;\n};\n\nexport default connect(mapStateToProps)(PanelMenu);","map":null,"metadata":{},"sourceType":"module"}